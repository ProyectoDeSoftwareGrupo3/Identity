// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240624190836_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "AAEF2C4F-DED7-4B1A-ADD3-9A3448B9E9E0",
                            AccessFailedCount = 0,
                            Address = "Calle 9 N° 2946",
                            City = "Berazategui",
                            ConcurrencyStamp = "796b349d-71ec-4a75-84e9-d05a2807874c",
                            Email = "bravo.jose.luis18@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jose",
                            LastName = "Bravo",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAVO.JOSE.LUIS18@GMAIL.COM",
                            NormalizedUserName = "BRAVO.JOSE.LUIS18@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKtcjxpNVPBVuOmfukqsH2qMUCoqJQobf9gpkO+PIh6BT4pUNJ62kkfAtg5ixPYTjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b934e6dd-745e-4da5-adf9-389873339583",
                            TwoFactorEnabled = false,
                            UserName = "bravo.jose.luis18@gmail.com"
                        },
                        new
                        {
                            Id = "FD9CB11E-76D6-4DEE-AAA3-921E983F36CA",
                            AccessFailedCount = 0,
                            Address = "Calle Los Andes N° 3850",
                            City = "Bernal",
                            ConcurrencyStamp = "ab7917f5-470b-4785-8f4d-4fff8f60935b",
                            Email = "alanleandrovargas03@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alan",
                            LastName = "Vargas",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALANLEANDROVARGAS03@gmail.com",
                            NormalizedUserName = "ALANLEANDROVARGAS03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIVuOPg3c8xpdSp2T6Lm+qLuvKQ2Yi4cTaY524j49qQaom/oWPM3v+wHJUDBBfFTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67ef9ff6-6309-4033-904e-7ac4c25c6a23",
                            TwoFactorEnabled = false,
                            UserName = "alanleandrovargas03@gmail.com"
                        },
                        new
                        {
                            Id = "1D98B435-C2C4-44D7-B1B2-AB229DE2ACED",
                            AccessFailedCount = 0,
                            Address = "Calle Grecia N°1234",
                            City = "Florencio Varela",
                            ConcurrencyStamp = "1037afe5-3ff5-4a8e-a195-88e1833e1d5e",
                            Email = "luciaoses1997@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lucia",
                            LastName = "Oses",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIAOSES1997@GMAIL.COM",
                            NormalizedUserName = "LUCIAOSES1997@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMstGPxoJbbquBMPx4j6vlFLwQmkmPbx041/T7gtDUd1ySLZPMD/LmzcOvxAz9NOuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29056e7c-1fbd-471e-9b7c-117e032c643d",
                            TwoFactorEnabled = false,
                            UserName = "luciaoses1997@gmail.com"
                        },
                        new
                        {
                            Id = "3D0F1848-5354-4CED-A125-525218044370",
                            AccessFailedCount = 0,
                            Address = "Viena n°1057",
                            City = "Florencio Varela",
                            ConcurrencyStamp = "40d9c49f-eefe-451d-a062-e741de07266e",
                            Email = "diegorolon01@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Diego",
                            LastName = "Rolon",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIEGOROLON01@OUTLOOK.COM",
                            NormalizedUserName = "DIEGOROLON01@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ99b/u3aCs68PhO68rRTqWeAVuOvA+ic6uy0rDufCCKUHXfzCfc+3W5zbAOHqbIfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea78efd2-3610-40cb-af84-efbdcee50160",
                            TwoFactorEnabled = false,
                            UserName = "diegorolon01@outlook.com"
                        },
                        new
                        {
                            Id = "19BB7F59-3372-433F-B343-00E75953D3A3",
                            AccessFailedCount = 0,
                            Address = "Adolfo Alsina 1238",
                            City = "Florencio Varela",
                            ConcurrencyStamp = "39e3f8f3-ee5f-4d53-be11-d1908474329b",
                            Email = "francopalacio03@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Franco",
                            LastName = "Palacio",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANCOPALACIO03@GMAIL.COM",
                            NormalizedUserName = "FRANCOPALACIO03@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENx+mqz327vW7nNg+1zgqiA0kYoFjll9H4UKjkdHMWEsIXIV4CjQ07Zy5qUp3yJ+ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17779c1-bb60-4676-83a2-b6154e66aa27",
                            TwoFactorEnabled = false,
                            UserName = "francopalacio03@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "DCD3F190-A5F0-4A75-8E2C-095CBED0B551",
                            ConcurrencyStamp = "1",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "3A6F1076-6B34-4251-83D9-E2C71519F402",
                            ConcurrencyStamp = "2",
                            Name = "Refugio",
                            NormalizedName = "REFUGIO"
                        },
                        new
                        {
                            Id = "05456319-A1AD-4AF9-B68B-7B6FD4161A7F",
                            ConcurrencyStamp = "3",
                            Name = "Miembro",
                            NormalizedName = "MIEMBRO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "AAEF2C4F-DED7-4B1A-ADD3-9A3448B9E9E0",
                            RoleId = "DCD3F190-A5F0-4A75-8E2C-095CBED0B551"
                        },
                        new
                        {
                            UserId = "FD9CB11E-76D6-4DEE-AAA3-921E983F36CA",
                            RoleId = "3A6F1076-6B34-4251-83D9-E2C71519F402"
                        },
                        new
                        {
                            UserId = "1D98B435-C2C4-44D7-B1B2-AB229DE2ACED",
                            RoleId = "DCD3F190-A5F0-4A75-8E2C-095CBED0B551"
                        },
                        new
                        {
                            UserId = "3D0F1848-5354-4CED-A125-525218044370",
                            RoleId = "DCD3F190-A5F0-4A75-8E2C-095CBED0B551"
                        },
                        new
                        {
                            UserId = "19BB7F59-3372-433F-B343-00E75953D3A3",
                            RoleId = "05456319-A1AD-4AF9-B68B-7B6FD4161A7F"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
